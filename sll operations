#include <stdio.h>
#include <stdlib.h>
struct Node 
{
    int data;
    struct Node *next;
}*head,*tail,*n;

void displayList() 
{
    struct Node *t;
    t=head;
    while(t!=NULL)
    {
    	printf("%d ",t->data);
    	t=t->next;
	}
}

void insertAtBeginning(int num) 
{
    n = (struct Node *)malloc(sizeof(struct Node));
    n->data=num;
    n->next=NULL;
    if(head==NULL)
    {
    	head=n;
    	tail=n;
	}
	else
	{
		n->next=head;
		head=n;
	}
    printf("%d inserted at the beginning.\n", num);
}

void insertAtEnd(int num) 
{
    n = (struct Node *)malloc(sizeof(struct Node));
    n->data=num;
    n->next=NULL;
    if(head==NULL)
    {
    	head=n;
    	tail=n;
	}
	else
	{
		tail->next=n;
		tail=n;
	}
        printf("%d inserted at the end.\n", num);
}

void insertAtPosition(int num, int mid) 
{
	struct Node *t;
    n = (struct Node *)malloc(sizeof(struct Node));
    n->data=num;
    n->next=NULL;
    for(t=head;t!=NULL;t=t->next)
    {
    	if(t->data==num)
    	{
    		break;
		}
    	else
    	{
	    	n->next=t->next;
	    	t->next=n;
     	}
         printf("%d inserted at position %d.\n", num,mid);
     }
}

void deleteAtBeginning()
 {
 	struct Node *t;
 	t=head;
 	head=t->next;
 	free(t);
    printf("Node deleted from the beginning.\n");
}

void deleteAtEnd()
 {
    struct Node *t,*tp;
    t=head;
    while(t->next!=NULL)
    {
    	tp=t;
    	t=t->next;
	}
	tail=tp;
	tail->next=NULL;
	free(t);
    printf("Node deleted from the end.\n");
 }

void deleteAtPosition(int num)
 {
    struct Node*t,*tp;
    t=head;
    while(t->data!=num)
    {
    	tp=t;
    	t=t->next;
	}
	tp->next = tail;
	free(t);
    printf("Node deleted from position %d.\n",num);
}

void sort() 
{
    struct Node *t, *s;
    int temp;
    for (t = head; t != NULL; t = t->next) 
	{
        for (s = t->next; s != NULL; s = s->next)
		 {
            if (t->data > s->data) 
			{
                temp = t->data;
                t->data = s->data;
                s->data = temp;
            }
        }
    }

    t = head;
    while (t != NULL) 
	{
        printf("%d ", t->data); 
        t = t->next;
    }
}

int search(int s)
{
   struct Node*t;
   for(t=head;t!=NULL;t=t->next)
   { 
     if(t->data==s)
     {
        return 0;
     }
   }
   return -1;
}

void min_max() 
{
    struct Node* t;
    int min, max;
    max = min = head->data;
    for (t = head; t != NULL; t = t->next) 
	{
        if (t->data > max) 
		{
            max = t->data;
        } 
		else if (t->data < min) 
		{
            min = t->data;
        }
    }
    printf("max is %d and min is %d", max, min);
}

int main()
{
    int choice, data, position, n,index;
    while (1)
	 {
        printf("\n1. Display List\n");
        printf("2. Insert at Beginning\n");
        printf("3. Insert at End\n");
        printf("4. Insert at Position\n");
        printf("5. Delete at Beginning\n");
        printf("6. Delete at End\n");
        printf("7. Delete at Position\n");
        printf("8. Sort the element\n");
        printf("9. Search element\n");
        printf("10. Min and max\n");
        printf("11. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice)
		 {
            case 1:
                displayList();
                break;
            case 2:
                printf("Enter the data to insert: ");
                scanf("%d", &data);
                insertAtBeginning(data);
                break;
            case 3:
                printf("Enter the data to insert: ");
                scanf("%d", &data);
                insertAtEnd(data);
                break;
            case 4:
                printf("Enter the data to insert: ");
                scanf("%d", &data);
                printf("Enter the position to insert: ");
                scanf("%d", &position);
                insertAtPosition(data, position);
                break;
            case 5:
                deleteAtBeginning();
                break;
            case 6:
                deleteAtEnd();
                break;
            case 7:
                printf("Enter the position to delete: ");
                scanf("%d", &position);
                deleteAtPosition(position);
                break;
            case 8:
            	printf("sorted node is");
            	sort();
            	break;
            case 9:
            	printf("enter the element to be searched:");
            	scanf("%d",&data);
            	index = search(data);
            	if(index==-1)
            	{
            	  printf("element not found\n");
		}
		else
		{
		  printf("element is found \n");
		}
		break;
	    case 10:
		min_max();
            case 11:
                exit(0);
            default:
                printf("Invalid choice.\n");
        }
    }
    return 0;
}
