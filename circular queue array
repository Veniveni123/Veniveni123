#include <stdio.h>
#define MAX 5
int queue[MAX];
int front = -1, rear = -1;

void Enqueue(int x) 
{
    if ((front == 0 && rear == MAX - 1) || (front == rear + 1)) 
	{
        printf("Queue is full\n");
        return;
    }
    else if (front == -1) 
	{
        front = 0;
        rear = 0;
    }
    else if (rear == MAX - 1 && front != 0) 
	{
        rear = 0;
    }
    else 
	{
        rear++;
    }
    queue[rear] = x;
}

void Dequeue() 
{
    if (front == -1) 
	{
        printf("Queue is empty\n");
        return;
    }
    printf("Element deleted from queue is : %d\n", queue[front]);
    if (front == rear) 
	{
        front = -1;
        rear = -1;
    }
    else if (front == MAX - 1) 
	{
        front = 0;
    }
    else 
	{
        front++;
    }
}

int isEmpty() 
{
    if (front == -1)
	{
        return 1;
    }
    return 0;
}

int isFull() 
{
    if ((front == 0 && rear == MAX - 1) || (front == rear + 1)) 
	{
        return 1;
    }
    return 0;
}

void Display() 
{
    int i;
    if (front == -1) 
	{
        printf("Queue is empty\n");
        return;
    }
    printf("Elements in Circular Queue are: \n");
    if (rear >= front) 
	{
        for (i = front; i <= rear; i++) 
		{
            printf("%d ", queue[i]);
        }
    }
    else 
	{
        for (i = front; i < MAX; i++) 
		{
            printf("%d ", queue[i]);
        }
        for (i = 0; i <= rear; i++) 
		{
            printf("%d ", queue[i]);
        }
    }
    printf("\n");
}

int front_q() 
{
    if (front == -1) 
	{
        printf("Queue is empty\n");
        return -1;
    }
   printf("the front element is %d\n",queue[front]);
}

int rear_q() 
{
    if (rear == -1) 
	{
        printf("Queue is empty\n");
        return -1;
    }
    printf("the rear element is %d\n",queue[rear]);
}
int main()
{
	printf("name: s.keerthiga veni\nreg no: 192324001\n");
	Enqueue(10); 
	Enqueue(20);
	Enqueue(30);
	Enqueue(40);
    Dequeue(); 
    isEmpty(); 
    isFull(); 
    Display(); 
    front_q(); 
    rear_q();
}
